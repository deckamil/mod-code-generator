#   FILE:           mcg_cgc_module_appendix.py
#
#   DESCRIPTION:
#       This module contains definition of Module class, which represents header
#       file of module appendix to be generated by MCG CGC.
#
#   COPYRIGHT:      Copyright (C) 2022-2023 Kamil DeÄ‡ github.com/deckamil
#   DATE:           30 AUG 2023
#
#   LICENSE:
#       This file is part of Mod Code Generator (MCG).
#
#       MCG is free software: you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation, either version 3 of the License, or
#       (at your option) any later version.
#
#       MCG is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#       GNU General Public License for more details.
#
#       Under Section 7 of GPL version 3, you are granted additional
#       permissions described in the MCG Output Exception, version 1, which
#       copy you should have received along with this program.
#
#       You should have received a copy of the GNU General Public License
#       along with this program. If not, see <https://www.gnu.org/licenses/>.


from mcg_cgc_module import Module


# Description:
# This class represents header file of module appendix to be generated by MCG CGC.
class ModuleAppendix(object):

    # Description:
    # This is class constructor.
    def __init__(self):
        # initialize object data
        self.module_name = ""
        self.generation_date = ""
        self.constant_list = []

    # Description
    # This method returns string representation of module appendix header file.
    def generate_module_appendix(self):

        # ********** MODULE HEADER ********** #

        # set module header
        module = "/*\n" + " *   Generated with Mod Code Generator (MCG) Code Generator Component (CGC)\n" + " *   on "
        # set module date
        module = module + self.generation_date + "\n"

        # set module comment
        module = module + " *\n"

        # set generic comment
        module = module + " *   This is header file of " + self.module_name + " module.\n"

        # set end of module header
        module = module + " */\n\n"

        # ********** HEADER GUARD ********** #

        # set header guard
        module = module + "#ifndef " + self.module_name + "_H_\n"
        module = module + "#define " + self.module_name + "_H_\n\n"

        # ********** DATA TYPES DEFINITION ********** #

        # set data types comment
        module = module + "// Definition of data types\n"

        # append data types
        module = module + "typedef signed char INT8;\n"
        module = module + "typedef signed short INT16;\n"
        module = module + "typedef signed int INT32;\n"
        module = module + "typedef signed long long INT64;\n"
        module = module + "typedef unsigned char UINT8;\n"
        module = module + "typedef unsigned short UINT16;\n"
        module = module + "typedef unsigned int UINT32;\n"
        module = module + "typedef unsigned long long UINT64;\n"
        module = module + "typedef float FLOAT32;\n"
        module = module + "typedef double FLOAT64;\n"
        module = module + "typedef UINT8 BOOL;\n\n"

        # ********** BOOL DATA STATES DEFINITION ********** #

        # set BOOL data states comment
        module = module + "// Definition of BOOL data states\n"

        # append BOOL data states
        module = module + "#define TRUE 1\n"
        module = module + "#define FALSE 0\n\n"

        # ********** CONSTANT DATA DEFINITION ********** #

        # if any constant was appended
        if len(self.constant_list) > 0:

            # set constant data comment
            module = module + "// Declaration of extern constant data\n"

            # append constant data
            for constant_element in self.constant_list:
                module = module + "extern const " + constant_element[Module.DATA_ELEMENT_TYPE_INDEX] + " " \
                         + constant_element[Module.DATA_ELEMENT_NAME_INDEX] + ";\n"

            # set separator line
            module = module + "\n"

        # ********** HEADER GUARD END ********** #

        # set header guard end
        module = module + "#endif " + "// " + self.module_name + "_H_\n\n"

        # ********** MODULE END ********** #

        # set module footer
        module = module + "/*\n" + " * END OF MODULE\n" + " */\n"

        # return string representation
        return module
